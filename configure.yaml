---
# configure.yaml
#
# Configuration of the system
# This is done using the newly created settings from the setup.yaml
# Split, because setup.yaml needs root login and we disable that as the last step

### TODO: follow these instructions to the letter and test:
### https://docs.docker.com/engine/install/debian/#install-using-the-repository
# Installs qemu and supporting software and puts home assistant into a virtual server
#
#
# Need to install an a new-ish kernel (5.11 reported to work, 5.8 is broken) because of:
#https://discuss.linuxcontainers.org/t/vms-do-not-start-on-lxd-4-10-4-11-on-aarch64-with-kernel-5-10/10227/5
#For this reason I tend to install an Ubuntu (Jammy?) on the host -- its kernels are newer in the precompiled armbians
- name: "Configure the system"
  hosts: [neo2, blue]
  remote_user: pragtich
  tasks:
    - name: apt upgrade
      become: yes
      apt:
        update_cache:     yes
        cache_valid_time: 3600
        upgrade:          safe

- name: Install QEMU and related software
  hosts: [blue]
  handlers:
    - name: "Reboot now"
      reboot: 
  tasks:
    - name: apt install
      become: yes
      notify: "Reboot now"
      apt:
        cache_valid_time: 60 #seconds
        name:
          - ipxe-qemu
          - libvirt-daemon
          - libvirt-daemon-system
          - qemu-efi-aarch64
          - qemu-efi-arm
          - qemu-system-arm
          - qemu-utils
          - virtinst
          - cloud-utils
          - dnsmasq
          - dmidecode
          - libnss-libvirt
          - bridge-utils
          - avahi-daemon
          - avahi-utils
          - libnss-mdns      
            
- name: Create a virtual machine for Homeassistant
  hosts: [blue]
  become: yes
  vars_files:
    - pr8-vault.yaml
  vars:
    vm_libvirt: "/var/lib/libvirt"
    vm_name: d11c
    vm_dir: "{{vm_libvirt}}/images/{{vm_name}}"
    vm_image_url: "https://cloud.debian.org/images/cloud/bullseye/latest/debian-11-generic-arm64.qcow2"
    vm_image: "{{vm_libvirt}}/templates/{{vm_name}}"
    vm_rootdisk: "{{vm_libvirt}}/{{vm_name}}/root-disk.qcow2"
    vm_size: "32G"
    vm_memory: "2048"
    vm_config: "{{vm_libvirt}}/{{vm_name}}/cloud-init.cfg"
    vm_config_iso: "{{vm_libvirt}}/{{vm_name}}/cloud-init.iso"
    vm_cpus: 2
    vm_maxcpus: 4
    vm_xml: "/etc/libvirt/qemu/{{vm_name}}.xml"
    # vm_ip: 10.0.0.97 Not used: we are currently using DHCP on the bridge network
    vm_host_ip: 10.0.0.98 # TODO: kan uit ansible gehaald worden
    vm_gateway: 10.0.0.1

  handlers:
    - name: (Hard)Stop the VM if it's already running
      shell:
        cmd: "virsh destroy {{vm_name}}"
      ignore_errors: yes
      listen: Nuke the VM
    - name: Nuke the existing vm
      shell: "virsh undefine {{vm_name}} --nvram"
      ignore_errors: yes
      listen: Nuke the VM
    - name: Convert the OS image
      shell:
        cmd: "qemu-img convert -f qcow2 -O qcow2 {{vm_image}} {{vm_rootdisk}}"
      listen: Nuke the VM
    - name: Resize the OS image
      shell:
        cmd: "qemu-img resize {{vm_rootdisk}} {{vm_size}}"
      listen: Nuke the VM
    - name: Install/import the OS into a VM
      shell:
        cmd: "virt-install --name {{vm_name}} --memory {{vm_memory}} --vcpus={{vm_cpus}},maxvcpus={{vm_maxcpus}} --disk {{vm_rootdisk}},device=disk,bus=virtio --check path_in_use=off --disk {{vm_config_iso}},device=cdrom --os-type linux --os-variant debian10 --virt-type kvm --graphics none --network bridge=br0,trustGuestRxFilters=\"yes\" --import --noautoconsole --autostart"
      listen: Nuke the VM
      
  tasks:
    - name: "Enable NSS and mdns entry for libvirt: discover host names"
      lineinfile:
        path: /etc/nsswitch.conf
        regexp: "^hosts:"
        line: "hosts:          files libvirt_guest mdns4_minimal [NOTFOUND=return] mymachines dns mdns4 myhostname"

    - name: Create folders
      file:
        state: directory
        path: "{{item}}"
      loop:
        - "{{vm_dir}}"
        - "/var/lib/libvirt/templates"
        - "/var/lib/libvirt/images"
        - "/var/lib/libvirt/{{vm_name}}"
    - name: Fetch the OS image
      get_url:
        dest: "{{vm_image}}"
        url: "{{vm_image_url}}"
      notify: Nuke the VM
    - name: Create the configuration file
      template:
        src: "cloud-init.cfg"
        dest: "{{vm_config}}"
      register: cloud_init_file
      notify: Nuke the VM
    - name: Convert the configuration file
      when: cloud_init_file is changed
      shell:
        cmd: "cloud-localds {{vm_config_iso}} {{vm_config}}"

    # Network configuration (brigded) following https://jamielinux.com/docs/libvirt-networking-handbook/bridged-network.html
    # host MAC address can be found using: ansible_default_ipv4.macaddress
    - name: Disable netfilter on bridge -- copy bridge.conf
      copy:
        dest: "/etc/sysctl.d/bridge.conf"
        src: "network/bridge.conf"
    - name: Disable netfilter on bridge -- copy 99-bridge.rules
      copy:
        dest: "/etc/udev/rules.d/99-bridge.rules"
        src: "network/99-bridge.rules"
    - name: Disable netfilter on bridge -- copy bridge.if
      template:
        dest: "/etc/network/interfaces.d/bridge.if"
        src: "network/bridge.if"
    
    - name: Reload libvirt service
      #TODO: only need to reload if libvirt config changed (when exactly?)
      service:
        name: libvirtd.service
        state: restarted
    - name: Restart networking on host
      shell: "ifup br0"
      ignore_errors: yes
      #shell: "ifdown --exclude=lo -a; sleep 1; ifup --exclude=lo -a"
      
      # Handlers should run here
    - name: Trigger a VM nuke if required
      meta: flush_handlers
    - name: Start the VM
      shell: "virsh start {{vm_name}}"
  
- name: Finalize with sudo rights
  remote_user: pragtich
  hosts: [neo2, blue]

  tasks:
    - name: Get my profile dotfiles
      git:
        repo: 'https://github.com/pragtich/dotfiles.git'
        dest: '~/.dotfiles'
        force: yes
    - name: Install my profile dotfiles
      shell: ~/.dotfiles/install.sh
      args:
        chdir: ~/.dotfiles/
 
